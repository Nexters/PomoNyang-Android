name: Deploy New Version

on:
  pull_request:
    types: [ opened,synchronize, edited ]

  push:
    branches:
      - feature/app-version

jobs:
  versioning:
    if: github.ref == 'refs/heads/feature/app-version'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          
      - name: Check PR body
        run: |
          echo "PR Body: ${{ github.event.pull_request.body }}"
      - name: Install jq
        run: sudo apt-get install jq -y



      - name: Determine Version Release Type
        id: version_type
        run: |
          pr_body=$(echo "${{ github.event.pull_request.body }}" | tr '[:upper:]' '[:lower:]')
          if [[ "$pr_body" =~ "major" ]]; then
            echo "release_type=major" >> $GITHUB_ENV
          elif [[ "$pr_body" =~ "minor" ]]; then
            echo "release_type=minor" >> $GITHUB_ENV
          else
            echo "release_type=patch" >> $GITHUB_ENV
          fi

      - name: Get App Version
        uses: ./.github/actions/get-app-version
        id: get-version

      - name: Echo Current App Version
        run: |
          echo "App Version: ${{ steps.get-version.outputs.version_name }}"
          echo "Major Version: ${{ steps.get-version.outputs.major }}"
          echo "Minor Version: ${{ steps.get-version.outputs.minor }}"
          echo "Patch Version: ${{ steps.get-version.outputs.patch }}"
          echo "Code: ${{ steps.get-version.outputs.code }}"


      - name: Calculate New Version
        id: calculate_version
        run: |
          major=${{ steps.get-version.outputs.major }}
          minor=${{ steps.get-version.outputs.minor }}
          patch=${{ steps.get-version.outputs.patch }}
          code=${{ steps.get-version.outputs.code }}

          if [ "$release_type" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$release_type" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          code=$((code + 1))

          echo "major=${major}" >> $GITHUB_OUTPUT
          echo "minor=${minor}" >> $GITHUB_OUTPUT
          echo "patch=${patch}" >> $GITHUB_OUTPUT
          echo "code=${code}" >> $GITHUB_OUTPUT
          echo "version_name=${major}.${minor}.${patch}" >> $GITHUB_OUTPUT

      - name: Update App Version
        uses: ./.github/actions/update-app-version
        with:
          major: ${{ steps.calculate_version.outputs.major }}
          minor: ${{ steps.calculate_version.outputs.minor }}
          patch: ${{ steps.calculate_version.outputs.patch }}
          code: ${{ steps.calculate_version.outputs.code }}
          file: "app-version.json"

      - name: Get Updated App Version
        id: get-updated-version
        uses: ./.github/actions/get-app-version

      - name: Create Git Tag
        run: |
          version_name=${{ steps.get-updated-version.outputs.version_name }}
          git tag -a "v$version_name" -m "Version $version_name"
          git push origin "v$version_name"
